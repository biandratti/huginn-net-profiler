name: Continuous Integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Build
        run: cargo build --verbose
      
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Run tests
        run: cargo test --verbose
      - name: Run tests with all features
        run: cargo test --verbose --all-features
      - name: Run doc tests
        run: cargo test --verbose --doc
        
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check code formatting
        run: cargo fmt -- --check
        
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Check lint
        run: cargo clippy --all-targets --all-features -- -D warnings
        
  examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Build examples
        run: cargo build --examples --verbose
      - name: Check examples compile
        run: |
          # Check if examples exist before trying to compile them
          if [ -f huginn-core/examples/basic_usage.rs ]; then
            cargo check --example basic_usage -p huginn-core
          fi
          if [ -f huginn-collector/examples/basic_collector.rs ]; then
            cargo check --example basic_collector -p huginn-collector
          fi
          if [ -f huginn-api/examples/basic_server.rs ]; then
            cargo check --example basic_server -p huginn-api
          fi
          if [ -f huginn-api/examples/basic_server_no_collector.rs ]; then
            cargo check --example basic_server_no_collector -p huginn-api
          fi
          
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Security audit
        run: cargo audit
        
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Generate coverage report
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false
          
  ci-success:
    runs-on: ubuntu-latest
    needs: [build, test, format, lint, examples, security]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.build.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.format.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.examples.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            echo "Build: ${{ needs.build.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Format: ${{ needs.format.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Examples: ${{ needs.examples.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi
